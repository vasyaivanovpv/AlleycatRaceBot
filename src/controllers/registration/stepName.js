const Scene = require("telegraf/scenes/base");
const Composer = require("telegraf/composer");
const { validateName, capitalizeFirstLetter } = require("../../utils");

const symbolNameLimit = 12;

const stepName = new Scene("step_name");

stepName.enter(async (ctx) => {
  ctx.session.registration = {
    name: "",
    bikeType: "",
    bikeBrand: "",
  };

  return ctx.replyWithMarkdown(
    `üë§ *–ò–º—è* \n\n–í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º –≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π. \n\n–ù–∞–ø—Ä–∏–º–µ—Ä: –í–∞—Å—è.`
  );
});

stepName.start(async (ctx) => {
  await ctx.scene.enter("main_menu");
});

stepName.on("text", async (ctx) => {
  if (ctx.message.text.length > symbolNameLimit)
    return ctx.replyWithMarkdown(
      `‚ùóÔ∏è –•–æ—Ç–µ–ª–æ—Å—å –±—ã –ø–æ–∫–æ—Ä–æ—á–µ, –¥–æ ${symbolNameLimit} —Å–∏–º–≤–æ–ª–æ–≤!`
    );

  if (!validateName(ctx.message.text))
    return ctx.replyWithMarkdown(
      "‚ùóÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ç–æ–ª—å–∫–æ –∏–º—è –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º –≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π!"
    );

  ctx.session.registration.name = capitalizeFirstLetter(
    ctx.message.text.toLowerCase()
  );

  return ctx.scene.enter("step_bike_type");
});

stepName.use(async (ctx) =>
  ctx.replyWithMarkdown(
    `‚ùóÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ–µ –∏–º—è –∏–ª–∏ –ø—Å–µ–≤–¥–æ–Ω–∏–º –≤ –æ–¥–Ω–æ —Å–ª–æ–≤–æ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ–π!`
  )
);

module.exports = stepName;
